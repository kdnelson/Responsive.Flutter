
========================================================================================

mobile: OrientationWidget(
   portrait: MobileDrawerPortraitOptions(
      title: title,
      iconData: iconData
      )
   );

With constructor:
class MobileDrawerPortraitOptions extends StateLessWidget { 
  MobileDrawerPortraitOptions(
   Key: key,
   title: title,
   iconData: iconData
  )

  @override
  Widget build(BuildContext context) {}
}

Versus

mobile: OrientationWidget(
   portrait: (context) => MobileDrawerPortraitOptions(),
   );

With extending

class MobileDrawerPortraitOptions extends BaseModelWidget<DrawerItemModel> {
  @override
  Widget build(BuildContext context, DrawerItemModel model) {}
}

========================================================================================

class LoginView extends StatefulWidget {
  @override
  _LoginViewState createState() => _LoginViewState();
}

class _LoginViewState extends State<LoginView> {}

Versus

class LoginViewModel extends ChangeNotifier {
}

abstract class BaseModelWidget<T> extends Widget {
   creates widget state from a provider
}

class LoginWidget extends BaseModelWidget<LoginViewModel> {
  @override
  Widget build(BuildContext context, LoginViewModel model) {}
}

========================================================================================

Const versus New?
    Best practices: 
        Why make a widget class constructor const?
        When to new say a Text() widget object?

========================================================================================

           IconButton(
            icon: Icon(
              model.iconData,
              size: 25,
            ),
            onPressed: () {
              AlertDialog();
            },
          ),